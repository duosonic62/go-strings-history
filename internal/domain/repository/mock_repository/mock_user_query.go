// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/user_query.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	valueobject "github.com/duosonic62/go-strings-history/internal/domain/valueobject"
	output "github.com/duosonic62/go-strings-history/pkg/usecase/output"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserQueryRepository is a mock of UserQueryRepository interface
type MockUserQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserQueryRepositoryMockRecorder
}

// MockUserQueryRepositoryMockRecorder is the mock recorder for MockUserQueryRepository
type MockUserQueryRepositoryMockRecorder struct {
	mock *MockUserQueryRepository
}

// NewMockUserQueryRepository creates a new mock instance
func NewMockUserQueryRepository(ctrl *gomock.Controller) *MockUserQueryRepository {
	mock := &MockUserQueryRepository{ctrl: ctrl}
	mock.recorder = &MockUserQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserQueryRepository) EXPECT() *MockUserQueryRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockUserQueryRepository) Find(arg0 valueobject.AuthorizationToken) (output.UserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(output.UserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockUserQueryRepositoryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserQueryRepository)(nil).Find), arg0)
}
