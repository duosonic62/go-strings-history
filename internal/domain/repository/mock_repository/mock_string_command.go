// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/string_command.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "github.com/duosonic62/go-strings-history/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStringCommandRepository is a mock of StringCommandRepository interface
type MockStringCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStringCommandRepositoryMockRecorder
}

// MockStringCommandRepositoryMockRecorder is the mock recorder for MockStringCommandRepository
type MockStringCommandRepositoryMockRecorder struct {
	mock *MockStringCommandRepository
}

// NewMockStringCommandRepository creates a new mock instance
func NewMockStringCommandRepository(ctrl *gomock.Controller) *MockStringCommandRepository {
	mock := &MockStringCommandRepository{ctrl: ctrl}
	mock.recorder = &MockStringCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStringCommandRepository) EXPECT() *MockStringCommandRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockStringCommandRepository) Save(guitarString *entity.GuitarString) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", guitarString)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockStringCommandRepositoryMockRecorder) Save(guitarString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStringCommandRepository)(nil).Save), guitarString)
}
