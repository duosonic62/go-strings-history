// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/factory/string.go

// Package mock_factory is a generated GoMock package.
package mock_factory

import (
	entity "github.com/duosonic62/go-strings-history/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStringFactory is a mock of StringFactory interface
type MockStringFactory struct {
	ctrl     *gomock.Controller
	recorder *MockStringFactoryMockRecorder
}

// MockStringFactoryMockRecorder is the mock recorder for MockStringFactory
type MockStringFactoryMockRecorder struct {
	mock *MockStringFactory
}

// NewMockStringFactory creates a new mock instance
func NewMockStringFactory(ctrl *gomock.Controller) *MockStringFactory {
	mock := &MockStringFactory{ctrl: ctrl}
	mock.recorder = &MockStringFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStringFactory) EXPECT() *MockStringFactoryMockRecorder {
	return m.recorder
}

// NewString mocks base method
func (m *MockStringFactory) NewString(thinGauge, thickGauge int, name, description, maker, url string) (*entity.GuitarString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewString", thinGauge, thickGauge, name, description, maker, url)
	ret0, _ := ret[0].(*entity.GuitarString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewString indicates an expected call of NewString
func (mr *MockStringFactoryMockRecorder) NewString(thinGauge, thickGauge, name, description, maker, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewString", reflect.TypeOf((*MockStringFactory)(nil).NewString), thinGauge, thickGauge, name, description, maker, url)
}
