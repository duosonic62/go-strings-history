// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/factory/user.go

// Package mock_factory is a generated GoMock package.
package mock_factory

import (
	entity "github.com/duosonic62/go-strings-history/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserFactory is a mock of UserFactory interface
type MockUserFactory struct {
	ctrl     *gomock.Controller
	recorder *MockUserFactoryMockRecorder
}

// MockUserFactoryMockRecorder is the mock recorder for MockUserFactory
type MockUserFactoryMockRecorder struct {
	mock *MockUserFactory
}

// NewMockUserFactory creates a new mock instance
func NewMockUserFactory(ctrl *gomock.Controller) *MockUserFactory {
	mock := &MockUserFactory{ctrl: ctrl}
	mock.recorder = &MockUserFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserFactory) EXPECT() *MockUserFactoryMockRecorder {
	return m.recorder
}

// NewUser mocks base method
func (m *MockUserFactory) NewUser(name, uid string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", name, uid)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUser indicates an expected call of NewUser
func (mr *MockUserFactoryMockRecorder) NewUser(name, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockUserFactory)(nil).NewUser), name, uid)
}
