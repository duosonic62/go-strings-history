// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// GuitarString is an object representing the database table.
type GuitarString struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Maker       null.String `boil:"maker" json:"maker,omitempty" toml:"maker" yaml:"maker,omitempty"`
	ThinGauge   null.Uint8  `boil:"thin_gauge" json:"thin_gauge,omitempty" toml:"thin_gauge" yaml:"thin_gauge,omitempty"`
	ThickGauge  null.Uint8  `boil:"thick_gauge" json:"thick_gauge,omitempty" toml:"thick_gauge" yaml:"thick_gauge,omitempty"`
	URL         null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	IsDeleted   string      `boil:"is_deleted" json:"is_deleted" toml:"is_deleted" yaml:"is_deleted"`
	Version     int         `boil:"version" json:"version" toml:"version" yaml:"version"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *guitarStringR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L guitarStringL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GuitarStringColumns = struct {
	ID          string
	Name        string
	Description string
	Maker       string
	ThinGauge   string
	ThickGauge  string
	URL         string
	IsDeleted   string
	Version     string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	Name:        "name",
	Description: "description",
	Maker:       "maker",
	ThinGauge:   "thin_gauge",
	ThickGauge:  "thick_gauge",
	URL:         "url",
	IsDeleted:   "is_deleted",
	Version:     "version",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

// Generated where

type whereHelpernull_Uint8 struct{ field string }

func (w whereHelpernull_Uint8) EQ(x null.Uint8) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Uint8) NEQ(x null.Uint8) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Uint8) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Uint8) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Uint8) LT(x null.Uint8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Uint8) LTE(x null.Uint8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Uint8) GT(x null.Uint8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Uint8) GTE(x null.Uint8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var GuitarStringWhere = struct {
	ID          whereHelperstring
	Name        whereHelperstring
	Description whereHelpernull_String
	Maker       whereHelpernull_String
	ThinGauge   whereHelpernull_Uint8
	ThickGauge  whereHelpernull_Uint8
	URL         whereHelpernull_String
	IsDeleted   whereHelperstring
	Version     whereHelperint
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpernull_Time
}{
	ID:          whereHelperstring{field: "`guitar_string`.`id`"},
	Name:        whereHelperstring{field: "`guitar_string`.`name`"},
	Description: whereHelpernull_String{field: "`guitar_string`.`description`"},
	Maker:       whereHelpernull_String{field: "`guitar_string`.`maker`"},
	ThinGauge:   whereHelpernull_Uint8{field: "`guitar_string`.`thin_gauge`"},
	ThickGauge:  whereHelpernull_Uint8{field: "`guitar_string`.`thick_gauge`"},
	URL:         whereHelpernull_String{field: "`guitar_string`.`url`"},
	IsDeleted:   whereHelperstring{field: "`guitar_string`.`is_deleted`"},
	Version:     whereHelperint{field: "`guitar_string`.`version`"},
	CreatedAt:   whereHelpertime_Time{field: "`guitar_string`.`created_at`"},
	UpdatedAt:   whereHelpernull_Time{field: "`guitar_string`.`updated_at`"},
}

// GuitarStringRels is where relationship names are stored.
var GuitarStringRels = struct {
	StringStringExchangeLogs string
}{
	StringStringExchangeLogs: "StringStringExchangeLogs",
}

// guitarStringR is where relationships are stored.
type guitarStringR struct {
	StringStringExchangeLogs StringExchangeLogSlice
}

// NewStruct creates a new relationship struct
func (*guitarStringR) NewStruct() *guitarStringR {
	return &guitarStringR{}
}

// guitarStringL is where Load methods for each relationship are stored.
type guitarStringL struct{}

var (
	guitarStringAllColumns            = []string{"id", "name", "description", "maker", "thin_gauge", "thick_gauge", "url", "is_deleted", "version", "created_at", "updated_at"}
	guitarStringColumnsWithoutDefault = []string{"id", "name", "description", "maker", "thin_gauge", "thick_gauge", "url", "is_deleted", "version", "created_at", "updated_at"}
	guitarStringColumnsWithDefault    = []string{}
	guitarStringPrimaryKeyColumns     = []string{"id"}
)

type (
	// GuitarStringSlice is an alias for a slice of pointers to GuitarString.
	// This should generally be used opposed to []GuitarString.
	GuitarStringSlice []*GuitarString
	// GuitarStringHook is the signature for custom GuitarString hook methods
	GuitarStringHook func(context.Context, boil.ContextExecutor, *GuitarString) error

	guitarStringQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	guitarStringType                 = reflect.TypeOf(&GuitarString{})
	guitarStringMapping              = queries.MakeStructMapping(guitarStringType)
	guitarStringPrimaryKeyMapping, _ = queries.BindMapping(guitarStringType, guitarStringMapping, guitarStringPrimaryKeyColumns)
	guitarStringInsertCacheMut       sync.RWMutex
	guitarStringInsertCache          = make(map[string]insertCache)
	guitarStringUpdateCacheMut       sync.RWMutex
	guitarStringUpdateCache          = make(map[string]updateCache)
	guitarStringUpsertCacheMut       sync.RWMutex
	guitarStringUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var guitarStringBeforeInsertHooks []GuitarStringHook
var guitarStringBeforeUpdateHooks []GuitarStringHook
var guitarStringBeforeDeleteHooks []GuitarStringHook
var guitarStringBeforeUpsertHooks []GuitarStringHook

var guitarStringAfterInsertHooks []GuitarStringHook
var guitarStringAfterSelectHooks []GuitarStringHook
var guitarStringAfterUpdateHooks []GuitarStringHook
var guitarStringAfterDeleteHooks []GuitarStringHook
var guitarStringAfterUpsertHooks []GuitarStringHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GuitarString) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guitarStringBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GuitarString) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guitarStringBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GuitarString) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guitarStringBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GuitarString) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guitarStringBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GuitarString) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guitarStringAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GuitarString) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guitarStringAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GuitarString) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guitarStringAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GuitarString) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guitarStringAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GuitarString) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range guitarStringAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGuitarStringHook registers your hook function for all future operations.
func AddGuitarStringHook(hookPoint boil.HookPoint, guitarStringHook GuitarStringHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		guitarStringBeforeInsertHooks = append(guitarStringBeforeInsertHooks, guitarStringHook)
	case boil.BeforeUpdateHook:
		guitarStringBeforeUpdateHooks = append(guitarStringBeforeUpdateHooks, guitarStringHook)
	case boil.BeforeDeleteHook:
		guitarStringBeforeDeleteHooks = append(guitarStringBeforeDeleteHooks, guitarStringHook)
	case boil.BeforeUpsertHook:
		guitarStringBeforeUpsertHooks = append(guitarStringBeforeUpsertHooks, guitarStringHook)
	case boil.AfterInsertHook:
		guitarStringAfterInsertHooks = append(guitarStringAfterInsertHooks, guitarStringHook)
	case boil.AfterSelectHook:
		guitarStringAfterSelectHooks = append(guitarStringAfterSelectHooks, guitarStringHook)
	case boil.AfterUpdateHook:
		guitarStringAfterUpdateHooks = append(guitarStringAfterUpdateHooks, guitarStringHook)
	case boil.AfterDeleteHook:
		guitarStringAfterDeleteHooks = append(guitarStringAfterDeleteHooks, guitarStringHook)
	case boil.AfterUpsertHook:
		guitarStringAfterUpsertHooks = append(guitarStringAfterUpsertHooks, guitarStringHook)
	}
}

// One returns a single guitarString record from the query.
func (q guitarStringQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GuitarString, error) {
	o := &GuitarString{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for guitar_string")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GuitarString records from the query.
func (q guitarStringQuery) All(ctx context.Context, exec boil.ContextExecutor) (GuitarStringSlice, error) {
	var o []*GuitarString

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GuitarString slice")
	}

	if len(guitarStringAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GuitarString records in the query.
func (q guitarStringQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count guitar_string rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q guitarStringQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if guitar_string exists")
	}

	return count > 0, nil
}

// StringStringExchangeLogs retrieves all the string_exchange_log's StringExchangeLogs with an executor via string_id column.
func (o *GuitarString) StringStringExchangeLogs(mods ...qm.QueryMod) stringExchangeLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`string_exchange_log`.`string_id`=?", o.ID),
	)

	query := StringExchangeLogs(queryMods...)
	queries.SetFrom(Query, "`string_exchange_log`")

	if len(queries.GetSelect(Query)) == 0 {
		queries.SetSelect(Query, []string{"`string_exchange_log`.*"})
	}

	return query
}

// LoadStringStringExchangeLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (guitarStringL) LoadStringStringExchangeLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGuitarString interface{}, mods queries.Applicator) error {
	var slice []*GuitarString
	var object *GuitarString

	if singular {
		object = maybeGuitarString.(*GuitarString)
	} else {
		slice = *maybeGuitarString.(*[]*GuitarString)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &guitarStringR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &guitarStringR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`string_exchange_log`), qm.WhereIn(`string_exchange_log.string_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load string_exchange_log")
	}

	var resultSlice []*StringExchangeLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice string_exchange_log")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on string_exchange_log")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for string_exchange_log")
	}

	if len(stringExchangeLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.StringStringExchangeLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stringExchangeLogR{}
			}
			foreign.R.String = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StringID {
				local.R.StringStringExchangeLogs = append(local.R.StringStringExchangeLogs, foreign)
				if foreign.R == nil {
					foreign.R = &stringExchangeLogR{}
				}
				foreign.R.String = local
				break
			}
		}
	}

	return nil
}

// AddStringStringExchangeLogs adds the given related objects to the existing relationships
// of the guitar_string, optionally inserting them as new records.
// Appends related to o.R.StringStringExchangeLogs.
// Sets related.R.String appropriately.
func (o *GuitarString) AddStringStringExchangeLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StringExchangeLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StringID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `string_exchange_log` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"string_id"}),
				strmangle.WhereClause("`", "`", 0, stringExchangeLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StringID = o.ID
		}
	}

	if o.R == nil {
		o.R = &guitarStringR{
			StringStringExchangeLogs: related,
		}
	} else {
		o.R.StringStringExchangeLogs = append(o.R.StringStringExchangeLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stringExchangeLogR{
				String: o,
			}
		} else {
			rel.R.String = o
		}
	}
	return nil
}

// GuitarStrings retrieves all the records using an executor.
func GuitarStrings(mods ...qm.QueryMod) guitarStringQuery {
	mods = append(mods, qm.From("`guitar_string`"))
	return guitarStringQuery{NewQuery(mods...)}
}

// FindGuitarString retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGuitarString(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*GuitarString, error) {
	guitarStringObj := &GuitarString{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `guitar_string` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, guitarStringObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from guitar_string")
	}

	return guitarStringObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GuitarString) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no guitar_string provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(guitarStringColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	guitarStringInsertCacheMut.RLock()
	cache, cached := guitarStringInsertCache[key]
	guitarStringInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			guitarStringAllColumns,
			guitarStringColumnsWithDefault,
			guitarStringColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(guitarStringType, guitarStringMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(guitarStringType, guitarStringMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `guitar_string` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `guitar_string` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `guitar_string` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, guitarStringPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into guitar_string")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for guitar_string")
	}

CacheNoHooks:
	if !cached {
		guitarStringInsertCacheMut.Lock()
		guitarStringInsertCache[key] = cache
		guitarStringInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GuitarString.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GuitarString) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	guitarStringUpdateCacheMut.RLock()
	cache, cached := guitarStringUpdateCache[key]
	guitarStringUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			guitarStringAllColumns,
			guitarStringPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update guitar_string, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `guitar_string` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, guitarStringPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(guitarStringType, guitarStringMapping, append(wl, guitarStringPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update guitar_string row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for guitar_string")
	}

	if !cached {
		guitarStringUpdateCacheMut.Lock()
		guitarStringUpdateCache[key] = cache
		guitarStringUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q guitarStringQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for guitar_string")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for guitar_string")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GuitarStringSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), guitarStringPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `guitar_string` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, guitarStringPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in guitarString slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all guitarString")
	}
	return rowsAff, nil
}

var mySQLGuitarStringUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GuitarString) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no guitar_string provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(guitarStringColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGuitarStringUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	guitarStringUpsertCacheMut.RLock()
	cache, cached := guitarStringUpsertCache[key]
	guitarStringUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			guitarStringAllColumns,
			guitarStringColumnsWithDefault,
			guitarStringColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			guitarStringAllColumns,
			guitarStringPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert guitar_string, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "guitar_string", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `guitar_string` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(guitarStringType, guitarStringMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(guitarStringType, guitarStringMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for guitar_string")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(guitarStringType, guitarStringMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for guitar_string")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for guitar_string")
	}

CacheNoHooks:
	if !cached {
		guitarStringUpsertCacheMut.Lock()
		guitarStringUpsertCache[key] = cache
		guitarStringUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GuitarString record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GuitarString) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GuitarString provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), guitarStringPrimaryKeyMapping)
	sql := "DELETE FROM `guitar_string` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from guitar_string")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for guitar_string")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q guitarStringQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no guitarStringQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from guitar_string")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for guitar_string")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GuitarStringSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(guitarStringBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), guitarStringPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `guitar_string` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, guitarStringPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from guitarString slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for guitar_string")
	}

	if len(guitarStringAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GuitarString) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGuitarString(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GuitarStringSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GuitarStringSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), guitarStringPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `guitar_string`.* FROM `guitar_string` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, guitarStringPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GuitarStringSlice")
	}

	*o = slice

	return nil
}

// GuitarStringExists checks if the GuitarString row exists.
func GuitarStringExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `guitar_string` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if guitar_string exists")
	}

	return exists, nil
}
