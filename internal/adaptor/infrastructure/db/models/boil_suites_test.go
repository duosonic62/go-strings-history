// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Guitars", testGuitars)
	t.Run("GuitarStrings", testGuitarStrings)
	t.Run("Members", testMembers)
	t.Run("StringExchangeLogs", testStringExchangeLogs)
}

func TestDelete(t *testing.T) {
	t.Run("Guitars", testGuitarsDelete)
	t.Run("GuitarStrings", testGuitarStringsDelete)
	t.Run("Members", testMembersDelete)
	t.Run("StringExchangeLogs", testStringExchangeLogsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Guitars", testGuitarsQueryDeleteAll)
	t.Run("GuitarStrings", testGuitarStringsQueryDeleteAll)
	t.Run("Members", testMembersQueryDeleteAll)
	t.Run("StringExchangeLogs", testStringExchangeLogsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Guitars", testGuitarsSliceDeleteAll)
	t.Run("GuitarStrings", testGuitarStringsSliceDeleteAll)
	t.Run("Members", testMembersSliceDeleteAll)
	t.Run("StringExchangeLogs", testStringExchangeLogsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Guitars", testGuitarsExists)
	t.Run("GuitarStrings", testGuitarStringsExists)
	t.Run("Members", testMembersExists)
	t.Run("StringExchangeLogs", testStringExchangeLogsExists)
}

func TestFind(t *testing.T) {
	t.Run("Guitars", testGuitarsFind)
	t.Run("GuitarStrings", testGuitarStringsFind)
	t.Run("Members", testMembersFind)
	t.Run("StringExchangeLogs", testStringExchangeLogsFind)
}

func TestBind(t *testing.T) {
	t.Run("Guitars", testGuitarsBind)
	t.Run("GuitarStrings", testGuitarStringsBind)
	t.Run("Members", testMembersBind)
	t.Run("StringExchangeLogs", testStringExchangeLogsBind)
}

func TestOne(t *testing.T) {
	t.Run("Guitars", testGuitarsOne)
	t.Run("GuitarStrings", testGuitarStringsOne)
	t.Run("Members", testMembersOne)
	t.Run("StringExchangeLogs", testStringExchangeLogsOne)
}

func TestAll(t *testing.T) {
	t.Run("Guitars", testGuitarsAll)
	t.Run("GuitarStrings", testGuitarStringsAll)
	t.Run("Members", testMembersAll)
	t.Run("StringExchangeLogs", testStringExchangeLogsAll)
}

func TestCount(t *testing.T) {
	t.Run("Guitars", testGuitarsCount)
	t.Run("GuitarStrings", testGuitarStringsCount)
	t.Run("Members", testMembersCount)
	t.Run("StringExchangeLogs", testStringExchangeLogsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Guitars", testGuitarsHooks)
	t.Run("GuitarStrings", testGuitarStringsHooks)
	t.Run("Members", testMembersHooks)
	t.Run("StringExchangeLogs", testStringExchangeLogsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Guitars", testGuitarsInsert)
	t.Run("Guitars", testGuitarsInsertWhitelist)
	t.Run("GuitarStrings", testGuitarStringsInsert)
	t.Run("GuitarStrings", testGuitarStringsInsertWhitelist)
	t.Run("Members", testMembersInsert)
	t.Run("Members", testMembersInsertWhitelist)
	t.Run("StringExchangeLogs", testStringExchangeLogsInsert)
	t.Run("StringExchangeLogs", testStringExchangeLogsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("GuitarToMemberUsingMember", testGuitarToOneMemberUsingMember)
	t.Run("StringExchangeLogToGuitarUsingGuitar", testStringExchangeLogToOneGuitarUsingGuitar)
	t.Run("StringExchangeLogToGuitarStringUsingString", testStringExchangeLogToOneGuitarStringUsingString)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("GuitarToStringExchangeLogs", testGuitarToManyStringExchangeLogs)
	t.Run("GuitarStringToStringStringExchangeLogs", testGuitarStringToManyStringStringExchangeLogs)
	t.Run("MemberToGuitars", testMemberToManyGuitars)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("GuitarToMemberUsingGuitars", testGuitarToOneSetOpMemberUsingMember)
	t.Run("StringExchangeLogToGuitarUsingStringExchangeLogs", testStringExchangeLogToOneSetOpGuitarUsingGuitar)
	t.Run("StringExchangeLogToGuitarStringUsingStringStringExchangeLogs", testStringExchangeLogToOneSetOpGuitarStringUsingString)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("GuitarToStringExchangeLogs", testGuitarToManyAddOpStringExchangeLogs)
	t.Run("GuitarStringToStringStringExchangeLogs", testGuitarStringToManyAddOpStringStringExchangeLogs)
	t.Run("MemberToGuitars", testMemberToManyAddOpGuitars)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Guitars", testGuitarsReload)
	t.Run("GuitarStrings", testGuitarStringsReload)
	t.Run("Members", testMembersReload)
	t.Run("StringExchangeLogs", testStringExchangeLogsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Guitars", testGuitarsReloadAll)
	t.Run("GuitarStrings", testGuitarStringsReloadAll)
	t.Run("Members", testMembersReloadAll)
	t.Run("StringExchangeLogs", testStringExchangeLogsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Guitars", testGuitarsSelect)
	t.Run("GuitarStrings", testGuitarStringsSelect)
	t.Run("Members", testMembersSelect)
	t.Run("StringExchangeLogs", testStringExchangeLogsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Guitars", testGuitarsUpdate)
	t.Run("GuitarStrings", testGuitarStringsUpdate)
	t.Run("Members", testMembersUpdate)
	t.Run("StringExchangeLogs", testStringExchangeLogsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Guitars", testGuitarsSliceUpdateAll)
	t.Run("GuitarStrings", testGuitarStringsSliceUpdateAll)
	t.Run("Members", testMembersSliceUpdateAll)
	t.Run("StringExchangeLogs", testStringExchangeLogsSliceUpdateAll)
}
