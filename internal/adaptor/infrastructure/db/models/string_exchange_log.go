// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// StringExchangeLog is an object representing the database table.
type StringExchangeLog struct {
	ID          string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	StringID    string    `boil:"string_id" json:"string_id" toml:"string_id" yaml:"string_id"`
	GuitarID    string    `boil:"guitar_id" json:"guitar_id" toml:"guitar_id" yaml:"guitar_id"`
	IsExchanged string    `boil:"is_exchanged" json:"is_exchanged" toml:"is_exchanged" yaml:"is_exchanged"`
	IsDeleted   string    `boil:"is_deleted" json:"is_deleted" toml:"is_deleted" yaml:"is_deleted"`
	Version     int       `boil:"version" json:"version" toml:"version" yaml:"version"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *stringExchangeLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stringExchangeLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StringExchangeLogColumns = struct {
	ID          string
	StringID    string
	GuitarID    string
	IsExchanged string
	IsDeleted   string
	Version     string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	StringID:    "string_id",
	GuitarID:    "guitar_id",
	IsExchanged: "is_exchanged",
	IsDeleted:   "is_deleted",
	Version:     "version",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

// Generated where

var StringExchangeLogWhere = struct {
	ID          whereHelperstring
	StringID    whereHelperstring
	GuitarID    whereHelperstring
	IsExchanged whereHelperstring
	IsDeleted   whereHelperstring
	Version     whereHelperint
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpernull_Time
}{
	ID:          whereHelperstring{field: "`string_exchange_log`.`id`"},
	StringID:    whereHelperstring{field: "`string_exchange_log`.`string_id`"},
	GuitarID:    whereHelperstring{field: "`string_exchange_log`.`guitar_id`"},
	IsExchanged: whereHelperstring{field: "`string_exchange_log`.`is_exchanged`"},
	IsDeleted:   whereHelperstring{field: "`string_exchange_log`.`is_deleted`"},
	Version:     whereHelperint{field: "`string_exchange_log`.`version`"},
	CreatedAt:   whereHelpertime_Time{field: "`string_exchange_log`.`created_at`"},
	UpdatedAt:   whereHelpernull_Time{field: "`string_exchange_log`.`updated_at`"},
}

// StringExchangeLogRels is where relationship names are stored.
var StringExchangeLogRels = struct {
	Guitar string
	String string
}{
	Guitar: "Guitar",
	String: "String",
}

// stringExchangeLogR is where relationships are stored.
type stringExchangeLogR struct {
	Guitar *Guitar
	String *GuitarString
}

// NewStruct creates a new relationship struct
func (*stringExchangeLogR) NewStruct() *stringExchangeLogR {
	return &stringExchangeLogR{}
}

// stringExchangeLogL is where Load methods for each relationship are stored.
type stringExchangeLogL struct{}

var (
	stringExchangeLogAllColumns            = []string{"id", "string_id", "guitar_id", "is_exchanged", "is_deleted", "version", "created_at", "updated_at"}
	stringExchangeLogColumnsWithoutDefault = []string{"id", "string_id", "guitar_id", "is_exchanged", "is_deleted", "version", "created_at", "updated_at"}
	stringExchangeLogColumnsWithDefault    = []string{}
	stringExchangeLogPrimaryKeyColumns     = []string{"id"}
)

type (
	// StringExchangeLogSlice is an alias for a slice of pointers to StringExchangeLog.
	// This should generally be used opposed to []StringExchangeLog.
	StringExchangeLogSlice []*StringExchangeLog
	// StringExchangeLogHook is the signature for custom StringExchangeLog hook methods
	StringExchangeLogHook func(context.Context, boil.ContextExecutor, *StringExchangeLog) error

	stringExchangeLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stringExchangeLogType                 = reflect.TypeOf(&StringExchangeLog{})
	stringExchangeLogMapping              = queries.MakeStructMapping(stringExchangeLogType)
	stringExchangeLogPrimaryKeyMapping, _ = queries.BindMapping(stringExchangeLogType, stringExchangeLogMapping, stringExchangeLogPrimaryKeyColumns)
	stringExchangeLogInsertCacheMut       sync.RWMutex
	stringExchangeLogInsertCache          = make(map[string]insertCache)
	stringExchangeLogUpdateCacheMut       sync.RWMutex
	stringExchangeLogUpdateCache          = make(map[string]updateCache)
	stringExchangeLogUpsertCacheMut       sync.RWMutex
	stringExchangeLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stringExchangeLogBeforeInsertHooks []StringExchangeLogHook
var stringExchangeLogBeforeUpdateHooks []StringExchangeLogHook
var stringExchangeLogBeforeDeleteHooks []StringExchangeLogHook
var stringExchangeLogBeforeUpsertHooks []StringExchangeLogHook

var stringExchangeLogAfterInsertHooks []StringExchangeLogHook
var stringExchangeLogAfterSelectHooks []StringExchangeLogHook
var stringExchangeLogAfterUpdateHooks []StringExchangeLogHook
var stringExchangeLogAfterDeleteHooks []StringExchangeLogHook
var stringExchangeLogAfterUpsertHooks []StringExchangeLogHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StringExchangeLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringExchangeLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StringExchangeLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringExchangeLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StringExchangeLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringExchangeLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StringExchangeLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringExchangeLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StringExchangeLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringExchangeLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StringExchangeLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringExchangeLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StringExchangeLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringExchangeLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StringExchangeLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringExchangeLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StringExchangeLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stringExchangeLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStringExchangeLogHook registers your hook function for all future operations.
func AddStringExchangeLogHook(hookPoint boil.HookPoint, stringExchangeLogHook StringExchangeLogHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		stringExchangeLogBeforeInsertHooks = append(stringExchangeLogBeforeInsertHooks, stringExchangeLogHook)
	case boil.BeforeUpdateHook:
		stringExchangeLogBeforeUpdateHooks = append(stringExchangeLogBeforeUpdateHooks, stringExchangeLogHook)
	case boil.BeforeDeleteHook:
		stringExchangeLogBeforeDeleteHooks = append(stringExchangeLogBeforeDeleteHooks, stringExchangeLogHook)
	case boil.BeforeUpsertHook:
		stringExchangeLogBeforeUpsertHooks = append(stringExchangeLogBeforeUpsertHooks, stringExchangeLogHook)
	case boil.AfterInsertHook:
		stringExchangeLogAfterInsertHooks = append(stringExchangeLogAfterInsertHooks, stringExchangeLogHook)
	case boil.AfterSelectHook:
		stringExchangeLogAfterSelectHooks = append(stringExchangeLogAfterSelectHooks, stringExchangeLogHook)
	case boil.AfterUpdateHook:
		stringExchangeLogAfterUpdateHooks = append(stringExchangeLogAfterUpdateHooks, stringExchangeLogHook)
	case boil.AfterDeleteHook:
		stringExchangeLogAfterDeleteHooks = append(stringExchangeLogAfterDeleteHooks, stringExchangeLogHook)
	case boil.AfterUpsertHook:
		stringExchangeLogAfterUpsertHooks = append(stringExchangeLogAfterUpsertHooks, stringExchangeLogHook)
	}
}

// One returns a single stringExchangeLog record from the query.
func (q stringExchangeLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StringExchangeLog, error) {
	o := &StringExchangeLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for string_exchange_log")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StringExchangeLog records from the query.
func (q stringExchangeLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (StringExchangeLogSlice, error) {
	var o []*StringExchangeLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StringExchangeLog slice")
	}

	if len(stringExchangeLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StringExchangeLog records in the query.
func (q stringExchangeLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count string_exchange_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stringExchangeLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if string_exchange_log exists")
	}

	return count > 0, nil
}

// Guitar pointed to by the foreign key.
func (o *StringExchangeLog) Guitar(mods ...qm.QueryMod) guitarQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.GuitarID),
	}

	queryMods = append(queryMods, mods...)

	query := Guitars(queryMods...)
	queries.SetFrom(Query, "`guitar`")

	return query
}

// String pointed to by the foreign key.
func (o *StringExchangeLog) String(mods ...qm.QueryMod) guitarStringQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.StringID),
	}

	queryMods = append(queryMods, mods...)

	query := GuitarStrings(queryMods...)
	queries.SetFrom(Query, "`guitar_string`")

	return query
}

// LoadGuitar allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stringExchangeLogL) LoadGuitar(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStringExchangeLog interface{}, mods queries.Applicator) error {
	var slice []*StringExchangeLog
	var object *StringExchangeLog

	if singular {
		object = maybeStringExchangeLog.(*StringExchangeLog)
	} else {
		slice = *maybeStringExchangeLog.(*[]*StringExchangeLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stringExchangeLogR{}
		}
		args = append(args, object.GuitarID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stringExchangeLogR{}
			}

			for _, a := range args {
				if a == obj.GuitarID {
					continue Outer
				}
			}

			args = append(args, obj.GuitarID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`guitar`), qm.WhereIn(`guitar.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Guitar")
	}

	var resultSlice []*Guitar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Guitar")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for guitar")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for guitar")
	}

	if len(stringExchangeLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Guitar = foreign
		if foreign.R == nil {
			foreign.R = &guitarR{}
		}
		foreign.R.StringExchangeLogs = append(foreign.R.StringExchangeLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GuitarID == foreign.ID {
				local.R.Guitar = foreign
				if foreign.R == nil {
					foreign.R = &guitarR{}
				}
				foreign.R.StringExchangeLogs = append(foreign.R.StringExchangeLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadString allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stringExchangeLogL) LoadString(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStringExchangeLog interface{}, mods queries.Applicator) error {
	var slice []*StringExchangeLog
	var object *StringExchangeLog

	if singular {
		object = maybeStringExchangeLog.(*StringExchangeLog)
	} else {
		slice = *maybeStringExchangeLog.(*[]*StringExchangeLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stringExchangeLogR{}
		}
		args = append(args, object.StringID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stringExchangeLogR{}
			}

			for _, a := range args {
				if a == obj.StringID {
					continue Outer
				}
			}

			args = append(args, obj.StringID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`guitar_string`), qm.WhereIn(`guitar_string.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GuitarString")
	}

	var resultSlice []*GuitarString
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GuitarString")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for guitar_string")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for guitar_string")
	}

	if len(stringExchangeLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.String = foreign
		if foreign.R == nil {
			foreign.R = &guitarStringR{}
		}
		foreign.R.StringStringExchangeLogs = append(foreign.R.StringStringExchangeLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StringID == foreign.ID {
				local.R.String = foreign
				if foreign.R == nil {
					foreign.R = &guitarStringR{}
				}
				foreign.R.StringStringExchangeLogs = append(foreign.R.StringStringExchangeLogs, local)
				break
			}
		}
	}

	return nil
}

// SetGuitar of the stringExchangeLog to the related item.
// Sets o.R.Guitar to related.
// Adds o to related.R.StringExchangeLogs.
func (o *StringExchangeLog) SetGuitar(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Guitar) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `string_exchange_log` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"guitar_id"}),
		strmangle.WhereClause("`", "`", 0, stringExchangeLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GuitarID = related.ID
	if o.R == nil {
		o.R = &stringExchangeLogR{
			Guitar: related,
		}
	} else {
		o.R.Guitar = related
	}

	if related.R == nil {
		related.R = &guitarR{
			StringExchangeLogs: StringExchangeLogSlice{o},
		}
	} else {
		related.R.StringExchangeLogs = append(related.R.StringExchangeLogs, o)
	}

	return nil
}

// SetString of the stringExchangeLog to the related item.
// Sets o.R.String to related.
// Adds o to related.R.StringStringExchangeLogs.
func (o *StringExchangeLog) SetString(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GuitarString) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `string_exchange_log` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"string_id"}),
		strmangle.WhereClause("`", "`", 0, stringExchangeLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StringID = related.ID
	if o.R == nil {
		o.R = &stringExchangeLogR{
			String: related,
		}
	} else {
		o.R.String = related
	}

	if related.R == nil {
		related.R = &guitarStringR{
			StringStringExchangeLogs: StringExchangeLogSlice{o},
		}
	} else {
		related.R.StringStringExchangeLogs = append(related.R.StringStringExchangeLogs, o)
	}

	return nil
}

// StringExchangeLogs retrieves all the records using an executor.
func StringExchangeLogs(mods ...qm.QueryMod) stringExchangeLogQuery {
	mods = append(mods, qm.From("`string_exchange_log`"))
	return stringExchangeLogQuery{NewQuery(mods...)}
}

// FindStringExchangeLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStringExchangeLog(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*StringExchangeLog, error) {
	stringExchangeLogObj := &StringExchangeLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `string_exchange_log` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, stringExchangeLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from string_exchange_log")
	}

	return stringExchangeLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StringExchangeLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no string_exchange_log provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stringExchangeLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stringExchangeLogInsertCacheMut.RLock()
	cache, cached := stringExchangeLogInsertCache[key]
	stringExchangeLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stringExchangeLogAllColumns,
			stringExchangeLogColumnsWithDefault,
			stringExchangeLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stringExchangeLogType, stringExchangeLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stringExchangeLogType, stringExchangeLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `string_exchange_log` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `string_exchange_log` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `string_exchange_log` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, stringExchangeLogPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into string_exchange_log")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for string_exchange_log")
	}

CacheNoHooks:
	if !cached {
		stringExchangeLogInsertCacheMut.Lock()
		stringExchangeLogInsertCache[key] = cache
		stringExchangeLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StringExchangeLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StringExchangeLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stringExchangeLogUpdateCacheMut.RLock()
	cache, cached := stringExchangeLogUpdateCache[key]
	stringExchangeLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stringExchangeLogAllColumns,
			stringExchangeLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update string_exchange_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `string_exchange_log` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, stringExchangeLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stringExchangeLogType, stringExchangeLogMapping, append(wl, stringExchangeLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update string_exchange_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for string_exchange_log")
	}

	if !cached {
		stringExchangeLogUpdateCacheMut.Lock()
		stringExchangeLogUpdateCache[key] = cache
		stringExchangeLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q stringExchangeLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for string_exchange_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for string_exchange_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StringExchangeLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stringExchangeLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `string_exchange_log` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stringExchangeLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in stringExchangeLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all stringExchangeLog")
	}
	return rowsAff, nil
}

var mySQLStringExchangeLogUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StringExchangeLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no string_exchange_log provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stringExchangeLogColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLStringExchangeLogUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stringExchangeLogUpsertCacheMut.RLock()
	cache, cached := stringExchangeLogUpsertCache[key]
	stringExchangeLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stringExchangeLogAllColumns,
			stringExchangeLogColumnsWithDefault,
			stringExchangeLogColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			stringExchangeLogAllColumns,
			stringExchangeLogPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert string_exchange_log, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "string_exchange_log", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `string_exchange_log` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(stringExchangeLogType, stringExchangeLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stringExchangeLogType, stringExchangeLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for string_exchange_log")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(stringExchangeLogType, stringExchangeLogMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for string_exchange_log")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for string_exchange_log")
	}

CacheNoHooks:
	if !cached {
		stringExchangeLogUpsertCacheMut.Lock()
		stringExchangeLogUpsertCache[key] = cache
		stringExchangeLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StringExchangeLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StringExchangeLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StringExchangeLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stringExchangeLogPrimaryKeyMapping)
	sql := "DELETE FROM `string_exchange_log` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from string_exchange_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for string_exchange_log")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stringExchangeLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no stringExchangeLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from string_exchange_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for string_exchange_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StringExchangeLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(stringExchangeLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stringExchangeLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `string_exchange_log` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stringExchangeLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stringExchangeLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for string_exchange_log")
	}

	if len(stringExchangeLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StringExchangeLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStringExchangeLog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StringExchangeLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StringExchangeLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stringExchangeLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `string_exchange_log`.* FROM `string_exchange_log` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stringExchangeLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StringExchangeLogSlice")
	}

	*o = slice

	return nil
}

// StringExchangeLogExists checks if the StringExchangeLog row exists.
func StringExchangeLogExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `string_exchange_log` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if string_exchange_log exists")
	}

	return exists, nil
}
