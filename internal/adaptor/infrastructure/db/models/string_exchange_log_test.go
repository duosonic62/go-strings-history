// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStringExchangeLogs(t *testing.T) {
	t.Parallel()

	query := StringExchangeLogs()

	if Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStringExchangeLogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StringExchangeLog{}
	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, true, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StringExchangeLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStringExchangeLogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StringExchangeLog{}
	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, true, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := StringExchangeLogs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StringExchangeLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStringExchangeLogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StringExchangeLog{}
	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, true, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StringExchangeLogSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StringExchangeLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStringExchangeLogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StringExchangeLog{}
	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, true, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StringExchangeLogExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if StringExchangeLog exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StringExchangeLogExists to return true, but got false.")
	}
}

func testStringExchangeLogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StringExchangeLog{}
	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, true, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	stringExchangeLogFound, err := FindStringExchangeLog(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if stringExchangeLogFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStringExchangeLogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StringExchangeLog{}
	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, true, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = StringExchangeLogs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStringExchangeLogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StringExchangeLog{}
	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, true, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := StringExchangeLogs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStringExchangeLogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	stringExchangeLogOne := &StringExchangeLog{}
	stringExchangeLogTwo := &StringExchangeLog{}
	if err = randomize.Struct(seed, stringExchangeLogOne, stringExchangeLogDBTypes, false, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}
	if err = randomize.Struct(seed, stringExchangeLogTwo, stringExchangeLogDBTypes, false, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stringExchangeLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stringExchangeLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StringExchangeLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStringExchangeLogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	stringExchangeLogOne := &StringExchangeLog{}
	stringExchangeLogTwo := &StringExchangeLog{}
	if err = randomize.Struct(seed, stringExchangeLogOne, stringExchangeLogDBTypes, false, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}
	if err = randomize.Struct(seed, stringExchangeLogTwo, stringExchangeLogDBTypes, false, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stringExchangeLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stringExchangeLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StringExchangeLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func stringExchangeLogBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *StringExchangeLog) error {
	*o = StringExchangeLog{}
	return nil
}

func stringExchangeLogAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *StringExchangeLog) error {
	*o = StringExchangeLog{}
	return nil
}

func stringExchangeLogAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *StringExchangeLog) error {
	*o = StringExchangeLog{}
	return nil
}

func stringExchangeLogBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StringExchangeLog) error {
	*o = StringExchangeLog{}
	return nil
}

func stringExchangeLogAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StringExchangeLog) error {
	*o = StringExchangeLog{}
	return nil
}

func stringExchangeLogBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StringExchangeLog) error {
	*o = StringExchangeLog{}
	return nil
}

func stringExchangeLogAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StringExchangeLog) error {
	*o = StringExchangeLog{}
	return nil
}

func stringExchangeLogBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StringExchangeLog) error {
	*o = StringExchangeLog{}
	return nil
}

func stringExchangeLogAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StringExchangeLog) error {
	*o = StringExchangeLog{}
	return nil
}

func testStringExchangeLogsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &StringExchangeLog{}
	o := &StringExchangeLog{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog object: %s", err)
	}

	AddStringExchangeLogHook(boil.BeforeInsertHook, stringExchangeLogBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	stringExchangeLogBeforeInsertHooks = []StringExchangeLogHook{}

	AddStringExchangeLogHook(boil.AfterInsertHook, stringExchangeLogAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	stringExchangeLogAfterInsertHooks = []StringExchangeLogHook{}

	AddStringExchangeLogHook(boil.AfterSelectHook, stringExchangeLogAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	stringExchangeLogAfterSelectHooks = []StringExchangeLogHook{}

	AddStringExchangeLogHook(boil.BeforeUpdateHook, stringExchangeLogBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	stringExchangeLogBeforeUpdateHooks = []StringExchangeLogHook{}

	AddStringExchangeLogHook(boil.AfterUpdateHook, stringExchangeLogAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	stringExchangeLogAfterUpdateHooks = []StringExchangeLogHook{}

	AddStringExchangeLogHook(boil.BeforeDeleteHook, stringExchangeLogBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	stringExchangeLogBeforeDeleteHooks = []StringExchangeLogHook{}

	AddStringExchangeLogHook(boil.AfterDeleteHook, stringExchangeLogAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	stringExchangeLogAfterDeleteHooks = []StringExchangeLogHook{}

	AddStringExchangeLogHook(boil.BeforeUpsertHook, stringExchangeLogBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	stringExchangeLogBeforeUpsertHooks = []StringExchangeLogHook{}

	AddStringExchangeLogHook(boil.AfterUpsertHook, stringExchangeLogAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	stringExchangeLogAfterUpsertHooks = []StringExchangeLogHook{}
}

func testStringExchangeLogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StringExchangeLog{}
	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, true, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StringExchangeLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStringExchangeLogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StringExchangeLog{}
	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(stringExchangeLogColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := StringExchangeLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStringExchangeLogToOneGuitarUsingGuitar(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StringExchangeLog
	var foreign Guitar

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, stringExchangeLogDBTypes, false, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, guitarDBTypes, false, guitarColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Guitar struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GuitarID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Guitar().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := StringExchangeLogSlice{&local}
	if err = local.L.LoadGuitar(ctx, tx, false, (*[]*StringExchangeLog)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Guitar == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Guitar = nil
	if err = local.L.LoadGuitar(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Guitar == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStringExchangeLogToOneGuitarStringUsingString(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StringExchangeLog
	var foreign GuitarString

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, stringExchangeLogDBTypes, false, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, guitarStringDBTypes, false, guitarStringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuitarString struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.StringID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.String().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := StringExchangeLogSlice{&local}
	if err = local.L.LoadString(ctx, tx, false, (*[]*StringExchangeLog)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.String == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.String = nil
	if err = local.L.LoadString(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.String == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStringExchangeLogToOneSetOpGuitarUsingGuitar(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StringExchangeLog
	var b, c Guitar

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stringExchangeLogDBTypes, false, strmangle.SetComplement(stringExchangeLogPrimaryKeyColumns, stringExchangeLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, guitarDBTypes, false, strmangle.SetComplement(guitarPrimaryKeyColumns, guitarColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, guitarDBTypes, false, strmangle.SetComplement(guitarPrimaryKeyColumns, guitarColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Guitar{&b, &c} {
		err = a.SetGuitar(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Guitar != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StringExchangeLogs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GuitarID != x.ID {
			t.Error("foreign key was wrong value", a.GuitarID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GuitarID))
		reflect.Indirect(reflect.ValueOf(&a.GuitarID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GuitarID != x.ID {
			t.Error("foreign key was wrong value", a.GuitarID, x.ID)
		}
	}
}
func testStringExchangeLogToOneSetOpGuitarStringUsingString(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StringExchangeLog
	var b, c GuitarString

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stringExchangeLogDBTypes, false, strmangle.SetComplement(stringExchangeLogPrimaryKeyColumns, stringExchangeLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, guitarStringDBTypes, false, strmangle.SetComplement(guitarStringPrimaryKeyColumns, guitarStringColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, guitarStringDBTypes, false, strmangle.SetComplement(guitarStringPrimaryKeyColumns, guitarStringColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GuitarString{&b, &c} {
		err = a.SetString(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.String != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StringStringExchangeLogs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.StringID != x.ID {
			t.Error("foreign key was wrong value", a.StringID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.StringID))
		reflect.Indirect(reflect.ValueOf(&a.StringID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.StringID != x.ID {
			t.Error("foreign key was wrong value", a.StringID, x.ID)
		}
	}
}

func testStringExchangeLogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StringExchangeLog{}
	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, true, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStringExchangeLogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StringExchangeLog{}
	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, true, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StringExchangeLogSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStringExchangeLogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StringExchangeLog{}
	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, true, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StringExchangeLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	stringExchangeLogDBTypes = map[string]string{`ID`: `varchar`, `StringID`: `varchar`, `GuitarID`: `varchar`, `IsExchanged`: `bit`, `IsDeleted`: `bit`, `Version`: `int`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_                        = bytes.MinRead
)

func testStringExchangeLogsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(stringExchangeLogPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(stringExchangeLogAllColumns) == len(stringExchangeLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StringExchangeLog{}
	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, true, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StringExchangeLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, true, stringExchangeLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStringExchangeLogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(stringExchangeLogAllColumns) == len(stringExchangeLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StringExchangeLog{}
	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, true, stringExchangeLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StringExchangeLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stringExchangeLogDBTypes, true, stringExchangeLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(stringExchangeLogAllColumns, stringExchangeLogPrimaryKeyColumns) {
		fields = stringExchangeLogAllColumns
	} else {
		fields = strmangle.SetComplement(
			stringExchangeLogAllColumns,
			stringExchangeLogPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StringExchangeLogSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStringExchangeLogsUpsert(t *testing.T) {
	t.Parallel()

	if len(stringExchangeLogAllColumns) == len(stringExchangeLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLStringExchangeLogUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := StringExchangeLog{}
	if err = randomize.Struct(seed, &o, stringExchangeLogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StringExchangeLog: %s", err)
	}

	count, err := StringExchangeLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, stringExchangeLogDBTypes, false, stringExchangeLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StringExchangeLog struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StringExchangeLog: %s", err)
	}

	count, err = StringExchangeLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
