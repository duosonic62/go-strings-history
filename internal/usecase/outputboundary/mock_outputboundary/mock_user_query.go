// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/outputboundary/user_query.go

// Package mock_outputboundary is a generated GoMock package.
package mock_outputboundary

import (
	input "github.com/duosonic62/go-strings-history/pkg/usecase/input"
	output "github.com/duosonic62/go-strings-history/pkg/usecase/output"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserQueryPresenter is a mock of UserQueryPresenter interface
type MockUserQueryPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockUserQueryPresenterMockRecorder
}

// MockUserQueryPresenterMockRecorder is the mock recorder for MockUserQueryPresenter
type MockUserQueryPresenterMockRecorder struct {
	mock *MockUserQueryPresenter
}

// NewMockUserQueryPresenter creates a new mock instance
func NewMockUserQueryPresenter(ctrl *gomock.Controller) *MockUserQueryPresenter {
	mock := &MockUserQueryPresenter{ctrl: ctrl}
	mock.recorder = &MockUserQueryPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserQueryPresenter) EXPECT() *MockUserQueryPresenterMockRecorder {
	return m.recorder
}

// OutputUser mocks base method
func (m *MockUserQueryPresenter) OutputUser(output output.UserOutput, ctx input.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OutputUser", output, ctx)
}

// OutputUser indicates an expected call of OutputUser
func (mr *MockUserQueryPresenterMockRecorder) OutputUser(output, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputUser", reflect.TypeOf((*MockUserQueryPresenter)(nil).OutputUser), output, ctx)
}
