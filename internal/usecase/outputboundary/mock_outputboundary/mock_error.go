// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/outputboundary/error.go

// Package mock_outputboundary is a generated GoMock package.
package mock_outputboundary

import (
	input "github.com/duosonic62/go-strings-history/pkg/usecase/input"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockErrorPresenter is a mock of ErrorPresenter interface
type MockErrorPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockErrorPresenterMockRecorder
}

// MockErrorPresenterMockRecorder is the mock recorder for MockErrorPresenter
type MockErrorPresenterMockRecorder struct {
	mock *MockErrorPresenter
}

// NewMockErrorPresenter creates a new mock instance
func NewMockErrorPresenter(ctrl *gomock.Controller) *MockErrorPresenter {
	mock := &MockErrorPresenter{ctrl: ctrl}
	mock.recorder = &MockErrorPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockErrorPresenter) EXPECT() *MockErrorPresenterMockRecorder {
	return m.recorder
}

// OutputError mocks base method
func (m *MockErrorPresenter) OutputError(ctx input.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OutputError", ctx, err)
}

// OutputError indicates an expected call of OutputError
func (mr *MockErrorPresenterMockRecorder) OutputError(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputError", reflect.TypeOf((*MockErrorPresenter)(nil).OutputError), ctx, err)
}
