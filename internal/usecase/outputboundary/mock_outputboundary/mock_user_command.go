// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/outputboundary/user_command.go

// Package mock_outputboundary is a generated GoMock package.
package mock_outputboundary

import (
	input "github.com/duosonic62/go-strings-history/pkg/usecase/input"
	output "github.com/duosonic62/go-strings-history/pkg/usecase/output"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserCommandPresenter is a mock of UserCommandPresenter interface
type MockUserCommandPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockUserCommandPresenterMockRecorder
}

// MockUserCommandPresenterMockRecorder is the mock recorder for MockUserCommandPresenter
type MockUserCommandPresenterMockRecorder struct {
	mock *MockUserCommandPresenter
}

// NewMockUserCommandPresenter creates a new mock instance
func NewMockUserCommandPresenter(ctrl *gomock.Controller) *MockUserCommandPresenter {
	mock := &MockUserCommandPresenter{ctrl: ctrl}
	mock.recorder = &MockUserCommandPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserCommandPresenter) EXPECT() *MockUserCommandPresenterMockRecorder {
	return m.recorder
}

// OutputAddUser mocks base method
func (m *MockUserCommandPresenter) OutputAddUser(data output.UserAddOutputData, ctx input.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OutputAddUser", data, ctx)
}

// OutputAddUser indicates an expected call of OutputAddUser
func (mr *MockUserCommandPresenterMockRecorder) OutputAddUser(data, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputAddUser", reflect.TypeOf((*MockUserCommandPresenter)(nil).OutputAddUser), data, ctx)
}
