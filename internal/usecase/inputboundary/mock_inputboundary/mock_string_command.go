// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/inputboundary/string_command.go

// Package mock_inputboundary is a generated GoMock package.
package mock_inputboundary

import (
	valueobject "github.com/duosonic62/go-strings-history/internal/domain/valueobject"
	input "github.com/duosonic62/go-strings-history/pkg/usecase/input"
	command "github.com/duosonic62/go-strings-history/pkg/usecase/input/command"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStringCommandUseCase is a mock of StringCommandUseCase interface
type MockStringCommandUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockStringCommandUseCaseMockRecorder
}

// MockStringCommandUseCaseMockRecorder is the mock recorder for MockStringCommandUseCase
type MockStringCommandUseCaseMockRecorder struct {
	mock *MockStringCommandUseCase
}

// NewMockStringCommandUseCase creates a new mock instance
func NewMockStringCommandUseCase(ctrl *gomock.Controller) *MockStringCommandUseCase {
	mock := &MockStringCommandUseCase{ctrl: ctrl}
	mock.recorder = &MockStringCommandUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStringCommandUseCase) EXPECT() *MockStringCommandUseCaseMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockStringCommandUseCase) Add(data command.StringRegisterInputData, token *valueobject.AuthorizationToken, ctx input.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", data, token, ctx)
}

// Add indicates an expected call of Add
func (mr *MockStringCommandUseCaseMockRecorder) Add(data, token, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStringCommandUseCase)(nil).Add), data, token, ctx)
}
