// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/inputboundary/string_query.go

// Package mock_inputboundary is a generated GoMock package.
package mock_inputboundary

import (
	valueobject "github.com/duosonic62/go-strings-history/internal/domain/valueobject"
	input "github.com/duosonic62/go-strings-history/pkg/usecase/input"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStringQueryUseCase is a mock of StringQueryUseCase interface
type MockStringQueryUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockStringQueryUseCaseMockRecorder
}

// MockStringQueryUseCaseMockRecorder is the mock recorder for MockStringQueryUseCase
type MockStringQueryUseCaseMockRecorder struct {
	mock *MockStringQueryUseCase
}

// NewMockStringQueryUseCase creates a new mock instance
func NewMockStringQueryUseCase(ctrl *gomock.Controller) *MockStringQueryUseCase {
	mock := &MockStringQueryUseCase{ctrl: ctrl}
	mock.recorder = &MockStringQueryUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStringQueryUseCase) EXPECT() *MockStringQueryUseCaseMockRecorder {
	return m.recorder
}

// GetGuitarString mocks base method
func (m *MockStringQueryUseCase) GetGuitarString(stringID string, token *valueobject.AuthorizationToken, ctx input.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetGuitarString", stringID, token, ctx)
}

// GetGuitarString indicates an expected call of GetGuitarString
func (mr *MockStringQueryUseCaseMockRecorder) GetGuitarString(stringID, token, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuitarString", reflect.TypeOf((*MockStringQueryUseCase)(nil).GetGuitarString), stringID, token, ctx)
}
