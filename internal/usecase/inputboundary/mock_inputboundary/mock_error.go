// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/inputboundary/error.go

// Package mock_inputboundary is a generated GoMock package.
package mock_inputboundary

import (
	input "github.com/duosonic62/go-strings-history/pkg/usecase/input"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockErrorUseCase is a mock of ErrorUseCase interface
type MockErrorUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockErrorUseCaseMockRecorder
}

// MockErrorUseCaseMockRecorder is the mock recorder for MockErrorUseCase
type MockErrorUseCaseMockRecorder struct {
	mock *MockErrorUseCase
}

// NewMockErrorUseCase creates a new mock instance
func NewMockErrorUseCase(ctrl *gomock.Controller) *MockErrorUseCase {
	mock := &MockErrorUseCase{ctrl: ctrl}
	mock.recorder = &MockErrorUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockErrorUseCase) EXPECT() *MockErrorUseCaseMockRecorder {
	return m.recorder
}

// BadRequestError mocks base method
func (m *MockErrorUseCase) BadRequestError(ctx input.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BadRequestError", ctx, err)
}

// BadRequestError indicates an expected call of BadRequestError
func (mr *MockErrorUseCaseMockRecorder) BadRequestError(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BadRequestError", reflect.TypeOf((*MockErrorUseCase)(nil).BadRequestError), ctx, err)
}

// UnauthorizedError mocks base method
func (m *MockErrorUseCase) UnauthorizedError(ctx input.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnauthorizedError", ctx, err)
}

// UnauthorizedError indicates an expected call of UnauthorizedError
func (mr *MockErrorUseCaseMockRecorder) UnauthorizedError(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnauthorizedError", reflect.TypeOf((*MockErrorUseCase)(nil).UnauthorizedError), ctx, err)
}
